{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "cell-os-base - https://git.corp.adobe.com/metal-cell/cell-os",

  "Parameters" : {
    "InstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "c3.2xlarge",
      "AllowedValues" : [
        "t2.micro", "t2.small", "t2.medium",
        "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge",
        "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
        "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge",
        "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge",
        "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge",
        "hs1.8xlarge", "g2.2xlarge"
      ],
      "ConstraintDescription" : "must be a valid, HVM-compatible EC2 instance type."
    },
    "CellName" : {
      "Description" : "The name of this cell (e.g. cell-1). This will get prefixed with account id and region to get the full cell id.",
      "Type" : "String",
      "Default": "cell-1"
    },
    "CellOsVersionBundle" : {
      "Description" : "cell-os bundle version",
      "Type" : "String",
      "Default": "cell-os-base-1.1-SNAPSHOT"
    },
    "SaasBaseDeploymentVersion" : {
      "Description" : "saasbase-deployment version",
      "Type" : "String",
      "Default": "1.26"
    },
    "KeyName" : {
      "Description" : "Existing EC2 KeyPair to be associated with all cluster instances for SSH access. The default user is 'centos'",
      "Type" : "AWS::EC2::KeyPair::KeyName"
    },
    "NucleusSize" : {
      "Description" : "Number of nodes in the cell nucleus",
      "Type" : "Number",
      "Default": 1
    },
    "StatelessBodySize" : {
      "Description" : "Number of nodes in the cell stateless body",
      "Type" : "Number",
      "Default": 1
    },
    "StatefulBodySize" : {
      "Description" : "Number of nodes in the cell stateful body (local disk access)",
      "Type" : "Number",
      "Default": 0
    },
    "MembraneSize" : {
      "Description" : "Number of nodes in the cell membrane, which is publicly exposed",
      "Type" : "Number",
      "Default": 1
    },
    "BucketName" : {
      "Description" : "Cell's S3 bucket name. Used for metadata and backups. Can be one per account as we prefix data with cell name inside",
      "Type" : "String"
    },
    "SaasBaseAccessKeyId" : {
      "Type" : "String",
      "Description" : "SaasBase S3 repo read-only AWS account Access Key ID (http://saasbase.corp.adobe.com/ops/operations/deployment.html)"
    },
    "SaasBaseSecretAccessKey": {
      "Type" : "String",
      "Description" : "SaasBase S3 repo read-only AWS account Secret Access Key (http://saasbase.corp.adobe.com/ops/operations/deployment.html)"
    },
    "BodyStackTemplate": {
      "Type" : "String",
      "Default" : "elastic-cell-scaling-group.json",
      "Description" : ""
    }
  },

  "Mappings" : {
    "RegionMap" : {
      "eu-central-1"   : { "AMI" : "ami-649d9a79" },
      "sa-east-1"      : { "AMI" : "ami-476ae25a" },
      "ap-northeast-1" : { "AMI" : "ami-24f47024" },
      "eu-west-1"      : { "AMI" : "ami-e2580795" },
      "us-east-1"      : { "AMI" : "ami-11b7017a" },
      "us-west-1"      : { "AMI" : "ami-37a45d73" },
      "us-west-2"      : { "AMI" : "ami-bd5b4f8d" },
      "ap-southeast-2" : { "AMI" : "ami-f54d0fcf" },
      "ap-southeast-1" : { "AMI" : "ami-3e9e906c" }
    },

    "UserData" : {
      "body"   : {
        "mesos" :  [
          "### Minimal inline cluster.yaml\n",
          "echo mesos::zookeeper:   zk://$zk/mesos      >> /root/cluster/cluster.yaml\n"
        ],
        "marathon" : [
          "### Minimal inline cluster.yaml\n",
          "echo marathon::zk:       zk://$zk/marathon   >> /root/cluster/cluster.yaml\n",
          "echo marathon::master:   zk://$zk/mesos      >> /root/cluster/cluster.yaml\n",
          "echo marathon::bin_path: /opt/marathon/bin   >> /root/cluster/cluster.yaml\n",
          "echo marathon::install_java: false           >> /root/cluster/cluster.yaml\n"
        ]
      }
    }
  },

  "Resources" : {

    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : "10.0.0.0/16",
        "EnableDnsSupport": true,
        "EnableDnsHostnames" : true,
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "Subnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.0.0/24",
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "AttachGateway" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },

    "RouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "Route" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "SubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "Subnet" },
        "RouteTableId" : { "Ref" : "RouteTable" }
      }
    },

    "NucleusRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/",
        "Policies": [ {
          "PolicyName": "s3_nucleus",
          "PolicyDocument": {
            "Version" : "2012-10-17",
            "Statement": [ {
              "Effect": "Allow",
              "Action": [
                "s3:AbortMultipartUpload",
                "s3:DeleteObject",
                "s3:GetBucketAcl",
                "s3:GetBucketPolicy",
                "s3:GetObject",
                "s3:GetObjectAcl",
                "s3:ListBucket",
                "s3:ListBucketMultipartUploads",
                "s3:ListMultipartUploadParts",
                "s3:PutObject",
                "s3:PutObjectAcl"
              ],
              "Resource": [
                { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref": "BucketName"}, "/*"]]},
                { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref": "BucketName"}]]}
              ]
            } ]
          }
        } ]
      }
    },

    "NucleusInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/", "Roles": [ { "Ref": "NucleusRole" } ]
      }
    },

    "NucleusStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {

        "TemplateURL": { "Fn::Join" : ["", ["https://s3.amazonaws.com/", {"Ref" : "BucketName"},
          "/", { "Ref" : "BodyStackTemplate" }]]},
        "TimeoutInMinutes": "10",

        "Parameters" : {
          "Role" : "nucleus",
          "Tags" : "nucleus",

          "PreZkModules"  : "docker,zookeeper,java",
          "PostZkModules" : "mesos::slave,hadoop_2_namenode,hadoop_2::hdfs::journalnode",

          "SaasBaseUserData" : { "Fn::Join" : ["", [
            "echo zookeeper::aws_s3_region: ", { "Ref" : "AWS::Region" }, " >> /root/cluster/cluster.yaml\n",
            "echo zookeeper::aws_s3_bucket: ", { "Ref" : "BucketName"}, " >> /root/cluster/cluster.yaml\n",
            "echo zookeeper::aws_s3_prefix: ", { "Fn::Join" : ["", [
              { "Ref" : "CellName" }, "/nucleus/exhibitor"
            ]]}, " >> /root/cluster/cluster.yaml\n"
          ]]},
          "IamInstanceProfile" :          { "Ref" : "NucleusInstanceProfile" },
          "SecurityGroups" : { "Fn::Join" : [ ",", [
                                          { "Ref" : "NucleusSecurityGroup" },
                                          { "Ref" : "ExternalWhitelistSecurityGroup" }  ]
          ]},
          "LoadBalancerNames" :           { "Fn::Join" : [ ",", [ { "Ref" : "ZookeeperLoadBalancer" } ]]},
          "ZookeeperLoadBalancer" :       { "Fn::GetAtt" : [ "ZookeeperLoadBalancer", "DNSName" ]},
          "AssociatePublicIpAddress" :    "true",

          "GroupSize" :                   { "Ref" : "NucleusSize" },
          "ImageId" :                     { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI"] },
          "CellName" :                    { "Ref" : "CellName" },
          "CellOsVersionBundle" :         { "Ref" : "CellOsVersionBundle" },
          "InstanceType" :                { "Ref" : "InstanceType" },
          "Subnet" :                      { "Ref" : "Subnet" },
          "KeyName" :                     { "Ref" : "KeyName" },
          "SaasBaseDeploymentVersion" :   { "Ref" : "SaasBaseDeploymentVersion"},
          "SaasBaseAccessKeyId" :         { "Ref" : "SaasBaseAccessKeyId"},
          "SaasBaseSecretAccessKey":      { "Ref" : "SaasBaseSecretAccessKey"},
          "WaitHandle" :                  { "Ref" : "WaitHandle"}
        }
      }
    },

    "MembraneStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": { "Fn::Join" : ["", ["https://s3.amazonaws.com/", {"Ref" : "BucketName"},
          "/", { "Ref" : "BodyStackTemplate" }]]},
        "TimeoutInMinutes": "10",
        "Parameters" : {
          "Role" :                        "membrane",
          "Tags" :                        "membrane,slave,body",

          "PreZkModules"  : "docker",
          "PostZkModules" : "mesos::slave",

          "SaasBaseUserData" : { "Fn::Join" : ["", [
            {"Fn::Join" : ["", { "Fn::FindInMap" : [ "UserData", "body", "mesos"] }]}
          ]]},

          "SecurityGroups" : { "Fn::Join" : [ ",", [

                                          { "Ref" : "PublicSecurityGroup" },
                                          { "Ref" : "BodySecurityGroup" },
                                          { "Ref" : "ExternalWhitelistSecurityGroup" }
          ]]},
          "LoadBalancerNames" :           { "Fn::Join" : [ ",", [ { "Ref" : "MembraneLoadBalancer" } ]]},
          "ZookeeperLoadBalancer" :       { "Fn::GetAtt" : [ "ZookeeperLoadBalancer", "DNSName" ]},
          "AssociatePublicIpAddress" :    "true",
          "GroupSize" :                   { "Ref" : "MembraneSize" },

          "ImageId" :                     { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI"] },
          "CellName" :                    { "Ref" : "CellName" },
          "CellOsVersionBundle" :         { "Ref" : "CellOsVersionBundle" },
          "InstanceType" :                { "Ref" : "InstanceType" },
          "Subnet" :                      { "Ref" : "Subnet" },
          "KeyName" :                     { "Ref" : "KeyName" },
          "SaasBaseDeploymentVersion" :   { "Ref" : "SaasBaseDeploymentVersion" },
          "SaasBaseAccessKeyId" :         { "Ref" : "SaasBaseAccessKeyId" },
          "SaasBaseSecretAccessKey":      { "Ref" : "SaasBaseSecretAccessKey" },
          "WaitHandle" :                  { "Ref" : "WaitHandle" }
        }
      }
    },


    "StatelessBodyStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {

        "TemplateURL": { "Fn::Join" : ["", ["https://s3.amazonaws.com/", {"Ref" : "BucketName"},
          "/", { "Ref" : "BodyStackTemplate" }]]},
        "TimeoutInMinutes": "10",

        "Parameters" : {
          "Role" : "stateless-body",
          "Tags" : "slave,body,stateless,stateless-body",

          "PreZkModules"  : "docker,java",
          "PostZkModules" : "mesos::master,mesos::slave,marathon",

          "SaasBaseUserData" : { "Fn::Join" : ["", [
            {"Fn::Join" : ["", { "Fn::FindInMap" : [ "UserData", "body", "mesos"] }]},
            {"Fn::Join" : ["", { "Fn::FindInMap" : [ "UserData", "body", "marathon"] }]}
          ]]},
          "SecurityGroups" : { "Fn::Join" : [ ",", [
                                            { "Ref" : "BodySecurityGroup" },
                                            { "Ref" : "ExternalWhitelistSecurityGroup" }
          ]]},
          "LoadBalancerNames" : { "Fn::Join" : [ ",", [

                                            { "Ref" : "MesosLoadBalancer" },
                                            { "Ref" : "MarathonLoadBalancer" }]
          ]},
          "ZookeeperLoadBalancer" :         { "Fn::GetAtt" : [ "ZookeeperLoadBalancer", "DNSName" ]},
          "AssociatePublicIpAddress" :      "true",
          "GroupSize" :                     { "Ref" : "StatelessBodySize" },

          "ImageId" :                       { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI"] },
          "CellName" :                      { "Ref" : "CellName" },
          "CellOsVersionBundle" :           { "Ref" : "CellOsVersionBundle" },
          "InstanceType" :                  { "Ref" : "InstanceType" },
          "Subnet" :                        { "Ref" : "Subnet" },
          "KeyName" :                       { "Ref" : "KeyName" },
          "SaasBaseDeploymentVersion" :     { "Ref" : "SaasBaseDeploymentVersion" },
          "SaasBaseAccessKeyId" :           { "Ref" : "SaasBaseAccessKeyId" },
          "SaasBaseSecretAccessKey":        { "Ref" : "SaasBaseSecretAccessKey" },
          "WaitHandle" :                    { "Ref" : "WaitHandle" }
        }
      }
    },

    "StatefulBodyStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {

        "TemplateURL": { "Fn::Join" : ["", ["https://s3.amazonaws.com/", {"Ref" : "BucketName"},
          "/", { "Ref" : "BodyStackTemplate" }]]},
        "TimeoutInMinutes": "10",

        "Parameters" : {
          "Role" : "stateful-body",
          "Tags" : "slave,body,stateful,stateful-body",

          "PreZkModules"  : "docker,java",
          "PostZkModules" : "mesos::slave,hadoop_2_datanode",

          "SaasBaseUserData" : { "Fn::Join" : ["", [
            {"Fn::Join" : ["", { "Fn::FindInMap" : [ "UserData", "body", "mesos"] }]},
            {"Fn::Join" : ["", { "Fn::FindInMap" : [ "UserData", "body", "marathon"] }]}
          ]]},
          "SecurityGroups" : { "Fn::Join" : [ ",", [
            { "Ref" : "BodySecurityGroup" },
            { "Ref" : "ExternalWhitelistSecurityGroup" }
          ]]},
          "LoadBalancerNames" : { "Fn::Join" : [ ",", [

            { "Ref" : "MesosLoadBalancer" },
            { "Ref" : "MarathonLoadBalancer" }]
          ]},
          "ZookeeperLoadBalancer" :         { "Fn::GetAtt" : [ "ZookeeperLoadBalancer", "DNSName" ]},
          "AssociatePublicIpAddress" :      "true",
          "GroupSize" :                     { "Ref" : "StatefulBodySize" },

          "ImageId" :                       { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI"] },
          "CellName" :                      { "Ref" : "CellName" },
          "CellOsVersionBundle" :           { "Ref" : "CellOsVersionBundle" },
          "InstanceType" :                  { "Ref" : "InstanceType" },
          "Subnet" :                        { "Ref" : "Subnet" },
          "KeyName" :                       { "Ref" : "KeyName" },
          "SaasBaseDeploymentVersion" :     { "Ref" : "SaasBaseDeploymentVersion" },
          "SaasBaseAccessKeyId" :           { "Ref" : "SaasBaseAccessKeyId" },
          "SaasBaseSecretAccessKey":        { "Ref" : "SaasBaseSecretAccessKey" },
          "WaitHandle" :                    { "Ref" : "WaitHandle" }
        }
      }
    },



    "BodySecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "All nodes in body. Grants access to LbSecurityGroup",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" :   "80", "ToPort" :   "80", "SourceSecurityGroupId" : { "Ref" : "LbSecurityGroup"} },
          { "IpProtocol" : "tcp", "FromPort" : "5050", "ToPort" : "5050", "SourceSecurityGroupId" : { "Ref" : "LbSecurityGroup"} },
          { "IpProtocol" : "tcp", "FromPort" : "8080", "ToPort" : "8080", "SourceSecurityGroupId" : { "Ref" : "LbSecurityGroup"} },
          { "IpProtocol" : "tcp", "FromPort" : "8181", "ToPort" : "8181", "SourceSecurityGroupId" : { "Ref" : "LbSecurityGroup"} }
        ]
      }
    },

    "NucleusSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "All nucleus nodes. Grants access to Exhibitor, ZK ports from LB and Body SG, respectively",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "8181", "ToPort" : "8181", "SourceSecurityGroupId" : { "Ref" : "LbSecurityGroup"} },
          { "IpProtocol" : "tcp", "FromPort" : "2181", "ToPort" : "2181", "SourceSecurityGroupId" : { "Ref" : "BodySecurityGroup"} },
          { "IpProtocol" : "tcp", "FromPort" : "2888", "ToPort" : "2888", "SourceSecurityGroupId" : { "Ref" : "BodySecurityGroup"} },
          { "IpProtocol" : "tcp", "FromPort" : "3888", "ToPort" : "3888", "SourceSecurityGroupId" : { "Ref" : "BodySecurityGroup"} }
        ]
      }
    },

    "ExternalWhitelistSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "All nodes are part of it grants access to some Adobe CIDRs. Email to metal-cell@adobe.com",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "0", "ToPort" : "65535", "CidrIp" : "127.127.0.0/16" },
          { "IpProtocol" : "tcp", "FromPort" : "0", "ToPort" : "65535", "CidrIp" : "127.127.216.100/32" },
          { "IpProtocol" : "tcp", "FromPort" : "0", "ToPort" : "65535", "CidrIp" : "127.127.198.0/24" },
          { "IpProtocol" : "tcp", "FromPort" : "0", "ToPort" : "65535", "CidrIp" : "127.127.140.131/32" }
        ]
      }
    },

    "LbSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable Exhibitor access",
        "VpcId" : { "Ref" : "VPC" }
      }
    },

    "PublicSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Public access for all nodes in this group. Tread carefully.",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" :  "80", "ToPort" :  "80", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0" }
        ]
      }
    },

    "BodyToLbSecurityGroupIngressToAvoidCircularDeps": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "LbSecurityGroup" }, "SourceSecurityGroupId" : { "Ref" : "BodySecurityGroup"},
        "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80"
      }
    },

    "NucleusToLbSecurityGroupIngressToAvoidCircularDeps": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "LbSecurityGroup" }, "SourceSecurityGroupId" : { "Ref" : "NucleusSecurityGroup"},
        "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80"
      }
    },

    "NucleusToNucleusSecurityGroupIngressToAvoidCircularDeps": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "NucleusSecurityGroup" }, "SourceSecurityGroupId" : { "Ref" : "NucleusSecurityGroup"},
        "IpProtocol" : "tcp", "FromPort" : "0", "ToPort" : "65535"
      }
    },

    "BodyToBodySecurityGroupIngressToAvoidCircularDeps": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "BodySecurityGroup" }, "SourceSecurityGroupId" : { "Ref" : "BodySecurityGroup"},
        "IpProtocol" : "tcp", "FromPort" : "0", "ToPort" : "65535"
      }
    },

    "MarathonLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "CrossZone": "true",
        "Scheme": "internal",
        "SecurityGroups": [{ "Ref": "LbSecurityGroup" }],
        "Subnets": [{ "Ref": "Subnet" }],
        "Listeners" : [ 
          { "LoadBalancerPort" : "80", "InstancePort" : "8080","Protocol" : "HTTP"}
        ],
        "HealthCheck" : {
          "Target" : "HTTP:8080/status",
          "HealthyThreshold" : "3",
          "UnhealthyThreshold" : "5",
          "Interval" : "30",
          "Timeout" : "5"
        },
        "Tags" : [
           { "Key" : "cell", "Value" : {"Ref": "CellName"} }
        ],
        "LoadBalancerName" : { "Fn::Join" : ["", [ {"Ref": "CellName"}, "-lb-marathon"]]}
      }
    },

    "ZookeeperLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "CrossZone": "true",
        "Scheme": "internal",
        "SecurityGroups": [{ "Ref": "LbSecurityGroup" }],
        "Subnets": [{ "Ref": "Subnet" }],
        "Listeners" : [ 
          { "LoadBalancerPort" : "80", "InstancePort" : "8181","Protocol" : "HTTP"}
        ],
        "HealthCheck" : {
          "Target" : "HTTP:8181/exhibitor/v1/cluster/state",
          "HealthyThreshold" : "3",
          "UnhealthyThreshold" : "5",
          "Interval" : "30",
          "Timeout" : "5"
        },
        "Tags" : [
          { "Key" : "cell", "Value" : {"Ref": "CellName"} }
        ],
        "LoadBalancerName" : { "Fn::Join" : ["", [ {"Ref": "CellName"}, "-lb-zk"]]}
      }
    },

    "MesosLoadBalancer" : {
     "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
     "Properties" : {
       "CrossZone": "true",
       "Scheme": "internal",
       "SecurityGroups": [{ "Ref": "LbSecurityGroup" }],
       "Subnets": [{ "Ref": "Subnet" }],
       "Listeners" : [ 
         { "LoadBalancerPort" : "80", "InstancePort" : "5050","Protocol" : "HTTP"}
       ],
       "HealthCheck" : {
         "Target" : "HTTP:5050/health",
         "HealthyThreshold" : "3",
         "UnhealthyThreshold" : "5",
         "Interval" : "30",
         "Timeout" : "5"
       },
       "Tags" : [
         { "Key" : "cell", "Value" : {"Ref": "CellName"} }
       ],
       "LoadBalancerName" : { "Fn::Join" : ["", [ {"Ref": "CellName"}, "-lb-mesos"]]}
     }
    },

    "MembraneLoadBalancer" : {
     "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
     "Properties" : {
       "CrossZone": "true",
       "Scheme": "internal",
       "SecurityGroups": [{ "Ref": "LbSecurityGroup" }],
       "Subnets": [{ "Ref": "Subnet" }],
       "Listeners" : [
         { "LoadBalancerPort" : "80", "InstancePort" : "80","Protocol" : "HTTP"}
       ],
       "HealthCheck" : {
         "Target" : "HTTP:80/health-check",
         "HealthyThreshold" : "3",
         "UnhealthyThreshold" : "5",
         "Interval" : "30",
         "Timeout" : "5"
       },
       "Tags" : [
         { "Key" : "cell", "Value" : {"Ref": "CellName"} }
       ],
       "LoadBalancerName" : { "Fn::Join" : ["", [ {"Ref": "CellName"}, "-lb-gw"]]}
     }
    },

    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    }
  }

}
