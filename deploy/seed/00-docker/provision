#!/bin/bash

yum install -y libcgroup systemd-libs policycoreutils-python audit-libs hdparm

set -eu
trap "echo 'error: script failed: see failed command above'" err
set ifs=$'\n\t'

LVM_PART_SIZE_GB=50

fail() {
  local err_msg=$1
  local exit_code=${2:-1}
  echo $err_msg
  exit $exit_code
}

remount_partitions() {
  local n=1
  local device

  for device in $(fdisk -l | grep -o '/dev/xvd[b-z]'); do
      if mountpoint -q -- "/mnt/data_${n}"; then
          echo "/mnt/data_${n} is already mounted"
      else
          echo "Remounting /mnt/data${n}"
          mkdir -p -m 755 /mnt/data_${n}
          mount ${device}1 /mnt/data_${n} || true
      fi

      n=$(( n+1 ))
  done
}

make_lvm_disk() {
  local device_path=$1
  local mount_point disk_size

  if [ -d /dev/docker ]; then
    echo "Docker logical volumes already in place."
  else
    # unmount the partition (if it's already mounted)
    mount_point=$(cat /proc/mounts | grep "${device_path}1" | awk '{print $2}')
    if [[ $mount_point ]]; then
      echo "Unmounting: $mount_point"
      umount $mount_point
    else
      echo "No mount point detected on: ${device_path}1"
    fi

    # detect the size of the target disk
    disk_size=$(fdisk -l | grep "Disk" | grep "${device_path}" | awk '{print $3}')

    # if the desired size for the LVM partition is larger
    # than the full disk size, just use the whole disk for the LVM partition;
    # otherwise, do a re-partition
    if [[ $disk_size > $LVM_PART_SIZE_GB ]]; then
      # delete the existing partition
      parted -s ${device_path} rm 1
      
      # create two partitions: 
      #  * 1st one to be mounted in the original mountpoint
      #  * 2nd one for LVM 
      parted -s ${device_path} -- mkpart primary 1 $(bc <<< "($disk_size-$LVM_PART_SIZE_GB-1)*1024/1")
      parted -s ${device_path} -- mkpart primary $(bc <<< "($disk_size-$LVM_PART_SIZE_GB)*1024/1") -1
      while [ ! -b ${device_path}1 ]; do
        partprobe ${device_path} >&2 || true
        hdparm -z ${device_path} >&2 || true
      done

      # format the 1st partition (xfs)
      mkfs.xfs -f ${device_path}1

      # format the 2nd partition (lvm)
      target_part=${device_path}2

      # re-mount the original mountpoints
      remount_partitions
    else
      # just use the whole existing disk/partition for LVM
      target_part=${device_path}1
    fi
    # we can now do the LVM partitioning
    pvcreate -ff -y ${target_part}
    vgcreate docker ${target_part}
    lvcreate -y --wipesignatures y -n thinpool docker -l 90%VG
    lvcreate -y --wipesignatures y -n thinpoolmeta docker -l 1%VG
    lvconvert -y --zero n -c 512K --thinpool docker/thinpool --poolmetadata docker/thinpoolmeta
    if [ ! -f /etc/lvm/profile/docker-thinpool.profile ]; then
      mkdir -p /etc/lvm/profile && echo "activation { thin_pool_autoextend_threshold=80  thin_pool_autoextend_percent=20 }" > /etc/lvm/profile/docker-thinpool.profile
    fi
    lvchange --metadataprofile docker-thinpool docker/thinpool
    lvchange --monitor y docker
  fi
}

compute_target_device() {
  local target drive_count

  read -r -a drives <<< $(lsblk | grep -e "^xvd" | awk '{print $1}')
  drive_count=${#drives[@]} 
  if [[ $drive_count > 1 ]]; then
    # choose the last available ephemeral drive
    target=${drives[(( $drive_count -1 ))]}
    echo /dev/$target
  else
    echo ""
  fi
}

# install the necessary tooling
yum install -y lvm2 bc

target_device=$(compute_target_device)
if [[ $target_device ]]; then
  echo "Creating LVM partition on $target_device"
  make_lvm_disk $target_device

  cat >> /opt/cell/cluster/cluster.yaml <<-EOT
docker::install_from_source: false
docker::use_upstream_package_source: true
docker::repo_opt:
  - --disablerepo=*
  - --enablerepo=docker
docker::storage_driver: devicemapper
docker::dm_thinpooldev: /dev/mapper/docker-thinpool
docker::dm_use_deferred_removal: true
docker::dm_fs: xfs
EOT

else
  echo "Expecting at least one ephemeral disk to be present."
  echo "Docker's devicemapper storage driver will work in loop-lvm mode."

  cat >> /opt/cell/cluster/cluster.yaml <<-EOT
docker::install_from_source: false
docker::use_upstream_package_source: true
docker::repo_opt:
  - --disablerepo=*
  - --enablerepo=docker
docker::storage_driver: devicemapper
docker::dm_fs: xfs
EOT
fi

/usr/local/bin/provision puppet docker 00-docker 5

