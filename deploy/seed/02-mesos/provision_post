#!/bin/bash

module_name="02-mesos"
provision_with_retry() {
  attempt=0
  max_attempts=5
  status=-1
  until [ $status == 0 ] ; do
    /usr/local/bin/provision puppet "${1}"
    status=$?
    attempt=$(($attempt + 1))
    if [[ $attempt -gt $max_attempts ]]; then
      exit 1
    fi
    if [[ $status != 0 ]]; then
      echo "Retry ${1} provisioning step: exit code $status, attempt $attempt / $max_attempts"
      report_status "${module_name} retry"
      sleep 5
    fi
  done
}

export zk=$(zk-list-nodes)
cat >>/opt/cell/cluster/cluster.yaml <<-EOT
mesos::zookeeper:   zk://$zk/mesos
mesos::listen_address: ""
mesos::master::env_var:
  MESOS_work_dir: /var/lib/mesos/master
  MESOS_ip_discovery_command: /usr/local/bin/get_ip
mesos::slave::env_var:
  MESOS_work_dir: /var/lib/mesos/slave
  MESOS_attributes: "role:${cell_role}"
  MESOS_gc_delay: 1days
  MESOS_slave_subsystems: cpu,memory
  MESOS_ip_discovery_command: /usr/local/bin/get_ip
EOT

mkdir -p /var/lib/mesos

if [[ -f /opt/cell/etc/roles/stateless-body ]]; then
  report_status "${module_name} start"
  provision_with_retry "base::tuning,mesos,mesos::slave,mesos::master"
  report_status "${module_name} end"
elif [[ -f /opt/cell/etc/roles/stateful-body || -f /opt/cell/etc/roles/membrane ]]; then
  report_status "${module_name} start"
  provision_with_retry "base::tuning,mesos,mesos::slave"
  report_status "${module_name} end"
else
  report_status "${module_name} skipped"
fi


