server {
  listen 80;
  server_name ~^hdfs.(api|gw)\.(?<domain>.+);
  set $hdfs_http_port 50070;
  set_by_lua $hdfs_nn1 'ngx.log(ngx.WARN, "----------", os.getenv("HDFS_NN1_HOST")); return os.getenv("HDFS_NN1_HOST") or "10.255.255.2"';
  set_by_lua $hdfs_nn2 'return os.getenv("HDFS_NN2_HOST") or "10.255.255.2"';
  set $hdfs_active_nn $hdfs_nn1;

  include /etc/api-gateway/conf.d/includes/resolvers.conf;

  location /check_hdfs_state {
    internal;
    proxy_method GET;
    proxy_pass_request_body off;
    proxy_pass_request_headers off;
    proxy_pass http://$hdfs_nn1:$hdfs_http_port/jmx?qry=Hadoop:service=NameNode,name=NameNodeStatus;
  }
  location / {
    if ( $is_admin_zone_ip = "0" ) {
        return 403;
    }

    rewrite_by_lua "
      local response = ngx.location.capture('/check_hdfs_state');
      local cjson = require 'cjson';
      ngx.log(ngx.WARN, tostring(response.body));
      local hdfs_state = assert(cjson.decode(response.body),
                        'Could not decode ' .. tostring(response.body));

      if hdfs_state.beans[1].State ~= 'active' then
        ngx.var.hdfs_active_nn=ngx.var.hdfs_nn2;
      end
      ngx.log(ngx.WARN, tostring(ngx.var.hdfs_active_nn));
    ";
    proxy_pass http://$hdfs_active_nn:$hdfs_http_port;
  }
}

