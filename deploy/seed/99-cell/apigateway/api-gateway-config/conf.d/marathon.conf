server {
  listen 80;
  server_name ~^marathon.(api|gw)\.(?<domain>.+);
  set_by_lua $marathon_uri 'return os.getenv("MARATHON_HOST") or "http://10.255.255.2:8080"';
  set_by_lua $mesos_uri 'return os.getenv("MESOS_MASTER_HOST") or "http://10.255.255.2:5050"';

  include /etc/api-gateway/conf.d/includes/resolvers.conf;
  include /etc/api-gateway/conf.d/commons/common-headers.conf;

  location /marathon_info {
    internal;
    proxy_method GET;
    proxy_pass_request_body off;
    proxy_pass_request_headers off;
    proxy_pass $marathon_uri/v2/info;
  }

  location /check_mesos_state {
    internal;
    proxy_method GET;
    proxy_pass_request_body off;
    proxy_pass_request_headers off;
    proxy_pass $mesos_uri/master/state.json;
  }
  # API requests to retrieve slave data
  location ~ ^/slave/(?<slaveid>[0-9a-zA-Z-]+)(?<slaveport>:\d+)*(?<url>.*)$ {
    if ( $is_admin_zone_ip = "0" ) {
        return 403;
    }

    set $slave_address '';

    more_clear_input_headers Accept-Encoding;

    rewrite_by_lua "
      local response = ngx.location.capture('/check_mesos_state');
    local cjson = require 'cjson';
    local mesos_state = assert(cjson.decode(response.body),
                        'Could not decode ' .. tostring(response.body));

    for _, slave in ipairs(mesos_state['slaves']) do
          if slave['id'] == ngx.var.slaveid then
              ngx.var.slave_address = ngx.re.gsub(slave['pid'], '.*@', '', 'jo')
              -- ngx.log(ngx.DEBUG, 'Resolved Mesos slave to address ', tostring(ngx.var.slave_address) )
          end
      end
    ";

    proxy_pass http://$slave_address$url$is_args$args;
  }

  #
  # This location overwrites the `mesos_leader_ui_url` to the domain name of the Gateway for Mesos
  #   i.e. http[s]://mesos.gw.$domain
  #
  location = /v2/info {
    if ( $is_admin_zone_ip = "0" ) {
        return 403;
    }

    content_by_lua "
      local cjson = require 'cjson';
      local response = ngx.location.capture('/marathon_info');
      local marathon_info = assert(cjson.decode(response.body),
                      'Could not decode ' .. tostring(response.body));
      if ( marathon_info == nil ) then
       return ngx.say(response.body)
      end
      local marathon_config = marathon_info.marathon_config
      if ( marathon_config ~= nil ) then
        marathon_config.mesos_leader_ui_url = tostring(ngx.var.proxy_forwarded_proto) .. '://mesos.gw.' .. tostring(ngx.var.domain)
      end
      return ngx.say( cjson.encode( marathon_info ) )
    ";
  }

  # this location is needed to tell the UI we're into a DCOS-like env
  #  so that it loads the error_log and output_log from ^/slaves/<slave-id>/...
  location = /pkgpanda/active.buildinfo.full.json {
    add_header Content-Type "aplication/json";
    return 200 '{}';
  }

  location / {
    if ( $is_admin_zone_ip = "0" ) {
        return 403;
    }
    proxy_pass $marathon_uri;
  }
}
