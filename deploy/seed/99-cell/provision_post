#!/bin/bash

module_name="99-cell"
if [[ "${cell_role}" != "nucleus" ]]; then
  report_status "${module_name} skipped"
  exit 0
fi

# The following HDFS logic is copied (duplicated from) the HDFS provision seeed
export nn1_host=$(machine_for_role nucleus 1 host)
export nn2_host=$(machine_for_role nucleus 2 host)

gateway_config_dir="apigateway/api-gateway-config"
gateway_config_path="/opt/cell/seed/99-cell/${gateway_config_dir}"
gateway_s3_uri="s3://${cell_bucket_name}/${full_cell_name}/membrane/${gateway_config_dir}"
marathon_workload_path="/opt/cell/cluster/apigateway.json"
cat >${marathon_workload_path} <<-EOT
{
  "id": "/cell-os/api-gateway",
  "container": {
    "type": "DOCKER",
    "docker": {
      "image": "cellos/apigateway:1.9.7.3",
      "forcePullImage": true,
      "network": "HOST"
    }
  },
  "cpus": 4,
  "mem": 4096.0,
  "env": {
    "MARATHON_HOST": "http://${marathon_elb}",
    "MESOS_MASTER_HOST": "http://${mesos_elb}",
    "HDFS_NN1_HOST": "${nn1_host}",
    "HDFS_NN2_HOST": "${nn2_host}",
    "EXHIBITOR_HOST": "http://${zk_elb}",
    "REMOTE_CONFIG": "${gateway_s3_uri}",
    "LOG_LEVEL": "debug"
  },
  "constraints": [[ "hostname","UNIQUE" ], ["role", "CLUSTER", "membrane"]],
  "ports": [ 80 ],
  "requirePorts": false,
  "instances": 1
}
EOT

mustache \
  "/opt/cell/seed/config/net-whitelist.json" \
  "${gateway_config_path}/conf.d/commons/whitelist.conf.mustache" \
  > "${gateway_config_path}/conf.d/commons/whitelist.conf"
aws s3 sync --delete  "${gateway_config_path}" "${gateway_s3_uri}"

# This is where we finish with cell-os-base and cell-os clustered starts
# If there were fatal errors we should have aborted until now.
# Retrying indefinitely
response=-1
count=0
until [[ "${response}" =~ ^20[0-9]$ || "${response}" == "409" ]]; do
response=$(curl -X POST -H "Content-Type: application/json" \
  http://${marathon_elb}/v2/apps\?force\=true \
  -d@"${marathon_workload_path}" \
  --fail --silent --write-out '%{response_code}' -so /opt/cell/gw.log)
  count=$(($count + 1))
  echo -e ".\c"
  if ! (( ${count} % 10 )); then
    echo "Trying to deploy gateway and getting ${response}"
    report_status "${module_name} retry"
  fi
  sleep 1
done

# Push the membrane ELB host (CNAME, because ELB IP can change)
# into Metal Cell public DNS (Route 53)
response=-1
count=0
until [[ "${response}" == "200" ]]; do
response=$(curl -i -k -X POST \
  "https://dns.metal-cell.adobe.io/gateway?api_key=7f7513685fcb4af1be40814ac2c199fa" \
  --data '{"cell_name": "'${cell_name}'","values": ["'${membrane_elb}'"]}' \
  --fail --silent --write-out '%{response_code}' -so /opt/cell/dns.log)
  count=$(($count + 1))
  echo -e ".\c"
  if ! (( ${count} % 10 )); then
    echo "Trying to register DNS for gateway and getting ${response}"
    report_status "${module_name} retry"
  fi
  sleep 1
done




